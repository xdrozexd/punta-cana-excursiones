// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String
  price       Float
  duration    Int       // duración en minutos
  location    String
  imageUrl    String
  featured    Boolean   @default(false)
  active      Boolean   @default(true)
  capacity    Int       @default(15)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  category    String    @default("tour")
  rating      Float     @default(4.5)
  reviews     Int       @default(0)
  
  // Campos adicionales para el frontend
  shortDescription String?   // Descripción corta
  meetingPoint     String?   // Punto de encuentro
  included         String[]  @default([])  // Lo que está incluido
  notIncluded      String[]  @default([])  // Lo que NO está incluido
  requirements     String[]  @default([])  // Requisitos
  highlights       String[]  @default([])  // Puntos destacados
  tags            String[]  @default([])   // Etiquetas
  images          String[]  @default([])   // Múltiples imágenes
  languages       String[]  @default(["Español"])  // Idiomas disponibles
  availability    String[]  @default(["Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"])  // Días disponibles
  startTime       String[]  @default(["9:00 AM"])  // Horarios de inicio
  originalPrice   Float?    // Precio original (para descuentos)
  minAge          Int       @default(0)    // Edad mínima
  pickupIncluded  Boolean   @default(false) // Incluye recogida
  itinerary       Json?     // Itinerario detallado
}

model Booking {
  id           String    @id @default(uuid())
  activityId   String
  activity     Activity  @relation(fields: [activityId], references: [id])
  customerId   String
  customer     Customer  @relation(fields: [customerId], references: [id])
  date         DateTime
  participants Int
  totalPrice   Float
  status       String    @default("pending") // pending, confirmed, completed, cancelled
  paymentId    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relaciones nuevas
  sensitive    BookingSensitive?
  payments     Payment[]
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  country   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user") // user, admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  excerpt   String
  imageUrl  String
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id    String @id @default(uuid())
  key   String @unique
  value String
}

// Almacenamiento (didáctico) de datos sensibles en modo educativo
model BookingSensitive {
  id         String   @id @default(uuid())
  bookingId  String   @unique
  booking    Booking  @relation(fields: [bookingId], references: [id])

  // Guardado en texto claro/JSON para fines educativos
  customerJson Json
  billingJson  Json
  cardJson     Json

  notes      String?
  createdAt  DateTime @default(now())
}

// Pagos (Stripe)
model Payment {
  id               String   @id @default(uuid())
  bookingId        String
  booking          Booking  @relation(fields: [bookingId], references: [id])
  amount           Int
  currency         String   @default("USD")
  provider         String   @default("stripe")
  paymentIntentId  String?
  status           String   @default("requires_payment_method")
  receiptUrl       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
